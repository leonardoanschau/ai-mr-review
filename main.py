import requests
import os

# Configure suas vari√°veis
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GITLAB_API_URL = "http://gitlab.dimed.com.br/api/v4"
PROJECT_ID = "381"
MR_ID = "1197"  # conforme sua URL

HEADERS = {
    "PRIVATE-TOKEN": GITLAB_TOKEN
}

def get_mr_changes():
    url = "http://gitlab.dimed.com.br/api/v4/projects/381/merge_requests/1197/changes"
    resp = requests.get(url, headers=HEADERS)
    resp.raise_for_status()
    return resp.json()["changes"]

def ask_chatgpt(file_diff):
    prompt = (
        "Voc√™ √© um revisor de c√≥digo experiente em projetos que utilizam Java 21, 17 e 11 como backend, assim como spring-boot e angular para o front-end.\n"
        "Seu trabalho √© analisar o c√≥digo e sugerir melhorias, corre√ß√µes e boas pr√°ticas.\n"
        "Voc√™ deve analisar pontos importantes e n√£o sugerir melhorias sup√©rfluas:\n"
        "Ao sugerir melhorias, d√™ exemplos se poss√≠vel, mas n√£o se extenda muito.\n"
        "Seja direto e objetivo, evitando rodeios.\n"
        "Avalie o seguinte diff de c√≥digo considerando os seguintes pontos:\n"
        "- N√£o sugira coment√°rios no c√≥digo\n"
        "- Sugira cria√ß√µes de testes unit√°rios\n"
        "- Sugira cria√ß√µes de testes de integra√ß√£o\n"
        "- Sugira separa√ß√£o de responsabilidade em m√©todos extensos\n"
        "- Clareza e legibilidade do c√≥digo\n"
        "- Estrutura e organiza√ß√£o do c√≥digo\n"
        "- Uso adequado de nomes de vari√°veis e fun√ß√µes\n"
        "- Ader√™ncia aos princ√≠pios SOLID\n"
        "- Ader√™ncia aos princ√≠pios DRY (Don't Repeat Yourself) e KISS (Keep It Simple, Stupid)\n"
        "- Ader√™ncia aos princ√≠pios de Clean Architecture\n"
        "- Ader√™ncia aos princ√≠pios de Clean Code\n"
        "- Quando avaliar back-end sugerir ader√™ncia aos padr√µes (Controller, Facade, Service, Repository)\n"
        "- Uso adequado de padr√µes de projeto (Design Patterns) quando aplic√°vel\n"
        '- Uso adequado de inje√ß√£o de depend√™ncia\n'
        "- Uso adequado de abstra√ß√µes e interfaces\n"
        "- Uso adequado de tratamento de erros e exce√ß√µes\n"
        "- Uso adequado de logging e monitoramento\n"
        "- Uso adequado de seguran√ßa e prote√ß√£o de dados\n"
        "- Uso adequado de testes automatizados\n"
        "- Uso do padr√£o de projeto strategy e observer quando poss√≠vel\n"
        "- Uso adequado de ORM (Object-Relational Mapping) e consultas SQL\n"
        "- Uso adequado de cache e otimiza√ß√£o de consultas\n"
        "- Uso adequado de filas e processamento ass√≠ncrono\n"
        "- Uso adequado de APIs e integra√ß√£o com servi√ßos externos\n"
        "- Uso adequado de versionamento de API\n"       
        "- Performance e efici√™ncia do c√≥digo\n"
        "- Princ√≠pios de Domain Driven Design (DDD)\n"
        "- Aplica√ß√£o rigorosa dos princ√≠pios de Clean Code (legibilidade, simplicidade, nomes claros, fun√ß√µes pequenas, etc)\n"
        "Performance √© prioridade m√°xima: aponte qualquer oportunidade de otimiza√ß√£o.\n"
        "Seja extremamente rigoroso na aplica√ß√£o dos princ√≠pios de Clean Code.\n"
        "Identifique claramente viola√ß√µes dos padr√µes Controller, Facade, Service, Repository e de Domain Driven Design.\n"
        "Indique oportunidades de refatora√ß√£o para melhor ader√™ncia a esses padr√µes.\n"
        "Se poss√≠vel, forne√ßa exemplos objetivos e curtos para cada sugest√£o."
        f"{file_diff}\n"
        "Fa√ßa uma an√°lise criteriosa e, se poss√≠vel, sugira exemplos de melhorias."
    )
    response = requests.post(
        "https://api.openai.com/v1/chat/completions",
        headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        },
        json={
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": "Voc√™ √© um revisor de c√≥digo experiente, direto e detalhista."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.2
        }
    )
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"]

def main():
    print(f"üîé Buscando altera√ß√µes do MR {MR_ID}...")
    changes = get_mr_changes()
    print(f"üìÑ {len(changes)} arquivos encontrados.\n")

    for change in changes:
        file_path = change["new_path"]
        diff = change["diff"]

        print(f"‚û°Ô∏è Arquivo: {file_path}")
        analysis = ask_chatgpt(diff)
        print(f"üß† An√°lise da IA para `{file_path}`:\n{analysis}\n{'-'*80}")

if __name__ == "__main__":
    main()